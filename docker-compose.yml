services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks: [obsnet]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health | grep -q ok"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks: [obsnet]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    ports:
      - "3200:3200"   # Tempo HTTP / metrics
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/var/tempo
    restart: unless-stopped
    networks: [obsnet]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: ["-config.file=/etc/loki/loki.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yaml:/etc/loki/loki.yaml:ro
      - loki-data:/var/loki
    restart: unless-stopped
    networks: [obsnet]
    user: "0:0"  # avoids volume perm quirks on macOS/Windows
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC (host apps send here)
      - "4318:4318"   # OTLP HTTP (host apps send here)
      - "8889:8889"   # Prometheus exporter /metrics
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector.yaml:ro
    restart: unless-stopped
    depends_on:
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks: [obsnet]

networks:
  obsnet:
    driver: bridge

volumes:
  tempo-data:
    driver: local
  loki-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
