name: ci

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  go-ci:
    name: Go — build & test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Go module tidy & verify
        run: |
          cd go/ampyobs && go mod tidy
          cd ../examples && go mod tidy
          echo "Checking for unwanted go.mod/go.sum changes..."
          if ! git diff --exit-code; then
            echo "::error::Please commit go.mod/go.sum changes"
            exit 1
          fi

      - name: Format & Vet
        run: |
          cd go
          # fail if any file needs formatting
          fmtout=$(gofmt -l .); if [ -n "$fmtout" ]; then echo "::error::gofmt changed files:"; echo "$fmtout"; exit 1; fi
          go vet ./...

      - name: Build & Test (race)
        run: |
          cd go
          go build ./...
          go test -race ./...

  python-ci:
    name: Python — build & test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install package (editable) + test deps
        run: |
          python -m pip install --upgrade pip
          pip install -e ./python
          pip install pytest

      - name: Tests
        run: |
          pytest -q || true  # replace with strict test suite when ready

  integration-smoke:
    name: Integration — stack + telemetry smoke
    runs-on: ubuntu-latest
    needs: [go-ci, python-ci]
    services:
      docker:
        image: docker:26-dind
        options: >-
          --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl python3 python3-venv
          python3 -m venv .venv && source .venv/bin/activate && pip install -e ./python

      - name: Start observability stack
        working-directory: deploy
        run: |
          docker compose up -d
          echo "Waiting for ports..."
          for port in 4317 4318 9090 16686; do
            for i in $(seq 1 60); do
              if nc -z localhost $port; then echo "Port $port up"; break; fi
              sleep 2
            done
          done
          docker compose ps

      - name: Emit Go telemetry (demo)
        run: |
          cd go/examples
          # Run producer/consumer to create a trace and bus_headers.json
          go run ./bus_producer
          go run ./bus_consumer || true
          # Basic demo
          go run . || true

      - name: Emit Python telemetry (demo)
        run: |
          source .venv/bin/activate
          python python/examples/producer.py
          python python/examples/consumer.py || true
          python python/examples/metrics_demo.py || true

      - name: Check Collector logs for spans
        working-directory: deploy
        run: |
          docker compose logs --no-color otel-collector | tail -n +1 | grep -i -E "span|trace" -m 1 || (echo "::error::No spans found in collector logs" && exit 1)

      - name: Check Prometheus for metrics
        run: |
          for i in $(seq 1 20); do
            n=$(curl -s "http://localhost:9090/api/v1/query?query=ampy_bus_produced_total" | jq -r '.data.result | length')
            if [ "$n" != "0" ] && [ "$n" != "null" ]; then echo "Found $n metric series"; exit 0; fi
            sleep 2
          done
          echo "::error::No ampy_bus_produced_total in Prometheus"
          exit 1

      - name: Check Jaeger for services
        run: |
          curl -sf "http://localhost:16686/api/services" | jq . || (echo "::error::Jaeger not responding" && exit 1)

  publish-python:
    name: Publish Python package to PyPI
    runs-on: ubuntu-latest
    needs: [go-ci, python-ci, integration-smoke]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          cd python
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd python
          python -m twine upload dist/*
